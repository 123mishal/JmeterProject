/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1001.0, "minX": 0.0, "maxY": 20398.0, "series": [{"data": [[0.0, 1001.0], [0.1, 1001.0], [0.2, 1026.0], [0.3, 1172.0], [0.4, 1188.0], [0.5, 1192.0], [0.6, 1226.0], [0.7, 1232.0], [0.8, 1232.0], [0.9, 1232.0], [1.0, 1235.0], [1.1, 1252.0], [1.2, 1259.0], [1.3, 1262.0], [1.4, 1269.0], [1.5, 1277.0], [1.6, 1283.0], [1.7, 1292.0], [1.8, 1302.0], [1.9, 1305.0], [2.0, 1312.0], [2.1, 1312.0], [2.2, 1321.0], [2.3, 1322.0], [2.4, 1324.0], [2.5, 1328.0], [2.6, 1331.0], [2.7, 1341.0], [2.8, 1342.0], [2.9, 1350.0], [3.0, 1351.0], [3.1, 1353.0], [3.2, 1362.0], [3.3, 1366.0], [3.4, 1367.0], [3.5, 1374.0], [3.6, 1378.0], [3.7, 1379.0], [3.8, 1387.0], [3.9, 1388.0], [4.0, 1391.0], [4.1, 1391.0], [4.2, 1395.0], [4.3, 1402.0], [4.4, 1410.0], [4.5, 1413.0], [4.6, 1454.0], [4.7, 1462.0], [4.8, 1470.0], [4.9, 1474.0], [5.0, 1475.0], [5.1, 1489.0], [5.2, 1490.0], [5.3, 1491.0], [5.4, 1495.0], [5.5, 1495.0], [5.6, 1499.0], [5.7, 1500.0], [5.8, 1501.0], [5.9, 1503.0], [6.0, 1503.0], [6.1, 1510.0], [6.2, 1530.0], [6.3, 1534.0], [6.4, 1535.0], [6.5, 1538.0], [6.6, 1547.0], [6.7, 1551.0], [6.8, 1564.0], [6.9, 1574.0], [7.0, 1579.0], [7.1, 1590.0], [7.2, 1609.0], [7.3, 1612.0], [7.4, 1624.0], [7.5, 1627.0], [7.6, 1632.0], [7.7, 1635.0], [7.8, 1639.0], [7.9, 1655.0], [8.0, 1655.0], [8.1, 1664.0], [8.2, 1681.0], [8.3, 1699.0], [8.4, 1704.0], [8.5, 1706.0], [8.6, 1723.0], [8.7, 1727.0], [8.8, 1732.0], [8.9, 1732.0], [9.0, 1736.0], [9.1, 1741.0], [9.2, 1742.0], [9.3, 1744.0], [9.4, 1755.0], [9.5, 1765.0], [9.6, 1767.0], [9.7, 1770.0], [9.8, 1771.0], [9.9, 1772.0], [10.0, 1780.0], [10.1, 1780.0], [10.2, 1797.0], [10.3, 1806.0], [10.4, 1822.0], [10.5, 1830.0], [10.6, 1847.0], [10.7, 1851.0], [10.8, 1854.0], [10.9, 1857.0], [11.0, 1870.0], [11.1, 1907.0], [11.2, 1916.0], [11.3, 1924.0], [11.4, 1936.0], [11.5, 1963.0], [11.6, 2024.0], [11.7, 2049.0], [11.8, 2057.0], [11.9, 2061.0], [12.0, 2083.0], [12.1, 2083.0], [12.2, 2123.0], [12.3, 2134.0], [12.4, 2139.0], [12.5, 2146.0], [12.6, 2149.0], [12.7, 2176.0], [12.8, 2180.0], [12.9, 2226.0], [13.0, 2255.0], [13.1, 2256.0], [13.2, 2263.0], [13.3, 2284.0], [13.4, 2311.0], [13.5, 2378.0], [13.6, 2458.0], [13.7, 2465.0], [13.8, 2499.0], [13.9, 2502.0], [14.0, 2522.0], [14.1, 2522.0], [14.2, 2530.0], [14.3, 2537.0], [14.4, 2549.0], [14.5, 2555.0], [14.6, 2556.0], [14.7, 2652.0], [14.8, 2669.0], [14.9, 2685.0], [15.0, 2691.0], [15.1, 2695.0], [15.2, 2705.0], [15.3, 2777.0], [15.4, 2778.0], [15.5, 2796.0], [15.6, 2803.0], [15.7, 2818.0], [15.8, 2831.0], [15.9, 2831.0], [16.0, 2847.0], [16.1, 2847.0], [16.2, 2879.0], [16.3, 2920.0], [16.4, 2925.0], [16.5, 2932.0], [16.6, 2933.0], [16.7, 2935.0], [16.8, 2937.0], [16.9, 2943.0], [17.0, 3076.0], [17.1, 3099.0], [17.2, 3131.0], [17.3, 3133.0], [17.4, 3218.0], [17.5, 3232.0], [17.6, 3307.0], [17.7, 3309.0], [17.8, 3319.0], [17.9, 3383.0], [18.0, 3394.0], [18.1, 3394.0], [18.2, 3396.0], [18.3, 3417.0], [18.4, 3436.0], [18.5, 3472.0], [18.6, 3474.0], [18.7, 3496.0], [18.8, 3507.0], [18.9, 3523.0], [19.0, 3535.0], [19.1, 3562.0], [19.2, 3581.0], [19.3, 3584.0], [19.4, 3591.0], [19.5, 3622.0], [19.6, 3632.0], [19.7, 3636.0], [19.8, 3657.0], [19.9, 3661.0], [20.0, 3670.0], [20.1, 3670.0], [20.2, 3684.0], [20.3, 3714.0], [20.4, 3767.0], [20.5, 3827.0], [20.6, 3843.0], [20.7, 3852.0], [20.8, 3854.0], [20.9, 3863.0], [21.0, 3922.0], [21.1, 4062.0], [21.2, 4275.0], [21.3, 4288.0], [21.4, 4329.0], [21.5, 4339.0], [21.6, 4341.0], [21.7, 4345.0], [21.8, 4391.0], [21.9, 4415.0], [22.0, 4438.0], [22.1, 4438.0], [22.2, 4444.0], [22.3, 4457.0], [22.4, 4457.0], [22.5, 4478.0], [22.6, 4517.0], [22.7, 4530.0], [22.8, 4536.0], [22.9, 4537.0], [23.0, 4559.0], [23.1, 4567.0], [23.2, 4571.0], [23.3, 4576.0], [23.4, 4578.0], [23.5, 4597.0], [23.6, 4605.0], [23.7, 4607.0], [23.8, 4658.0], [23.9, 4662.0], [24.0, 4749.0], [24.1, 4749.0], [24.2, 4766.0], [24.3, 4769.0], [24.4, 4782.0], [24.5, 4789.0], [24.6, 4809.0], [24.7, 4810.0], [24.8, 4815.0], [24.9, 4819.0], [25.0, 4829.0], [25.1, 4846.0], [25.2, 4872.0], [25.3, 4894.0], [25.4, 4898.0], [25.5, 4901.0], [25.6, 4903.0], [25.7, 4927.0], [25.8, 4927.0], [25.9, 4945.0], [26.0, 4952.0], [26.1, 4952.0], [26.2, 4975.0], [26.3, 4978.0], [26.4, 5015.0], [26.5, 5019.0], [26.6, 5028.0], [26.7, 5066.0], [26.8, 5082.0], [26.9, 5087.0], [27.0, 5102.0], [27.1, 5133.0], [27.2, 5134.0], [27.3, 5158.0], [27.4, 5200.0], [27.5, 5206.0], [27.6, 5316.0], [27.7, 5322.0], [27.8, 5330.0], [27.9, 5358.0], [28.0, 5369.0], [28.1, 5369.0], [28.2, 5376.0], [28.3, 5425.0], [28.4, 5427.0], [28.5, 5430.0], [28.6, 5434.0], [28.7, 5435.0], [28.8, 5447.0], [28.9, 5490.0], [29.0, 5515.0], [29.1, 5523.0], [29.2, 5526.0], [29.3, 5534.0], [29.4, 5543.0], [29.5, 5554.0], [29.6, 5578.0], [29.7, 5580.0], [29.8, 5599.0], [29.9, 5642.0], [30.0, 5666.0], [30.1, 5666.0], [30.2, 5678.0], [30.3, 5684.0], [30.4, 5827.0], [30.5, 5887.0], [30.6, 5915.0], [30.7, 5919.0], [30.8, 5925.0], [30.9, 5926.0], [31.0, 5927.0], [31.1, 5933.0], [31.2, 5951.0], [31.3, 5960.0], [31.4, 6011.0], [31.5, 6040.0], [31.6, 6072.0], [31.7, 6101.0], [31.8, 6133.0], [31.9, 6135.0], [32.0, 6162.0], [32.1, 6162.0], [32.2, 6192.0], [32.3, 6217.0], [32.4, 6234.0], [32.5, 6288.0], [32.6, 6349.0], [32.7, 6359.0], [32.8, 6454.0], [32.9, 6494.0], [33.0, 6564.0], [33.1, 6628.0], [33.2, 6766.0], [33.3, 6768.0], [33.4, 6779.0], [33.5, 6791.0], [33.6, 6821.0], [33.7, 6885.0], [33.8, 6915.0], [33.9, 6956.0], [34.0, 6990.0], [34.1, 6990.0], [34.2, 7016.0], [34.3, 7060.0], [34.4, 7122.0], [34.5, 7278.0], [34.6, 7315.0], [34.7, 7333.0], [34.8, 7340.0], [34.9, 7361.0], [35.0, 7725.0], [35.1, 7734.0], [35.2, 7759.0], [35.3, 7798.0], [35.4, 7802.0], [35.5, 7816.0], [35.6, 7935.0], [35.7, 7938.0], [35.8, 7941.0], [35.9, 7959.0], [36.0, 8019.0], [36.1, 8019.0], [36.2, 8032.0], [36.3, 8728.0], [36.4, 8758.0], [36.5, 8769.0], [36.6, 8864.0], [36.7, 8875.0], [36.8, 8875.0], [36.9, 8909.0], [37.0, 8937.0], [37.1, 8984.0], [37.2, 9177.0], [37.3, 10954.0], [37.4, 11006.0], [37.5, 11010.0], [37.6, 12144.0], [37.7, 12167.0], [37.8, 12285.0], [37.9, 12298.0], [38.0, 12298.0], [38.1, 12341.0], [38.2, 12377.0], [38.3, 12378.0], [38.4, 12394.0], [38.5, 12396.0], [38.6, 12418.0], [38.7, 12438.0], [38.8, 12442.0], [38.9, 12458.0], [39.0, 12460.0], [39.1, 12499.0], [39.2, 15156.0], [39.3, 15166.0], [39.4, 15168.0], [39.5, 15178.0], [39.6, 15179.0], [39.7, 15182.0], [39.8, 15183.0], [39.9, 15184.0], [40.0, 15184.0], [40.1, 15185.0], [40.2, 15186.0], [40.3, 15190.0], [40.4, 15195.0], [40.5, 15197.0], [40.6, 15203.0], [40.7, 15203.0], [40.8, 15209.0], [40.9, 15211.0], [41.0, 15212.0], [41.1, 15215.0], [41.2, 15215.0], [41.3, 15223.0], [41.4, 15226.0], [41.5, 15230.0], [41.6, 15238.0], [41.7, 15239.0], [41.8, 15239.0], [41.9, 15246.0], [42.0, 15246.0], [42.1, 15248.0], [42.2, 15255.0], [42.3, 15259.0], [42.4, 15259.0], [42.5, 15263.0], [42.6, 15267.0], [42.7, 15275.0], [42.8, 15276.0], [42.9, 15277.0], [43.0, 15284.0], [43.1, 15286.0], [43.2, 15296.0], [43.3, 15304.0], [43.4, 15312.0], [43.5, 15314.0], [43.6, 15315.0], [43.7, 15317.0], [43.8, 15317.0], [43.9, 15318.0], [44.0, 15318.0], [44.1, 15327.0], [44.2, 15330.0], [44.3, 15331.0], [44.4, 15333.0], [44.5, 15335.0], [44.6, 15339.0], [44.7, 15345.0], [44.8, 15345.0], [44.9, 15350.0], [45.0, 15351.0], [45.1, 15365.0], [45.2, 15372.0], [45.3, 15380.0], [45.4, 15382.0], [45.5, 15386.0], [45.6, 15391.0], [45.7, 15393.0], [45.8, 15397.0], [45.9, 15404.0], [46.0, 15404.0], [46.1, 15404.0], [46.2, 15407.0], [46.3, 15418.0], [46.4, 15428.0], [46.5, 15429.0], [46.6, 15439.0], [46.7, 15441.0], [46.8, 15443.0], [46.9, 15473.0], [47.0, 15483.0], [47.1, 15495.0], [47.2, 15497.0], [47.3, 15497.0], [47.4, 15505.0], [47.5, 15512.0], [47.6, 15518.0], [47.7, 15524.0], [47.8, 15525.0], [47.9, 15534.0], [48.0, 15534.0], [48.1, 15535.0], [48.2, 15582.0], [48.3, 15592.0], [48.4, 15597.0], [48.5, 15607.0], [48.6, 15609.0], [48.7, 15615.0], [48.8, 15615.0], [48.9, 15616.0], [49.0, 15622.0], [49.1, 15623.0], [49.2, 15628.0], [49.3, 15629.0], [49.4, 15630.0], [49.5, 15648.0], [49.6, 15653.0], [49.7, 15657.0], [49.8, 15664.0], [49.9, 15685.0], [50.0, 15685.0], [50.1, 15701.0], [50.2, 15711.0], [50.3, 15719.0], [50.4, 15720.0], [50.5, 15722.0], [50.6, 15722.0], [50.7, 15722.0], [50.8, 15723.0], [50.9, 15735.0], [51.0, 15758.0], [51.1, 15760.0], [51.2, 15763.0], [51.3, 15769.0], [51.4, 15770.0], [51.5, 15773.0], [51.6, 15787.0], [51.7, 15792.0], [51.8, 15797.0], [51.9, 15797.0], [52.0, 15797.0], [52.1, 15798.0], [52.2, 15800.0], [52.3, 15805.0], [52.4, 15806.0], [52.5, 15807.0], [52.6, 15813.0], [52.7, 15819.0], [52.8, 15819.0], [52.9, 15819.0], [53.0, 15821.0], [53.1, 15821.0], [53.2, 15823.0], [53.3, 15824.0], [53.4, 15825.0], [53.5, 15826.0], [53.6, 15830.0], [53.7, 15831.0], [53.8, 15832.0], [53.9, 15842.0], [54.0, 15842.0], [54.1, 15845.0], [54.2, 15859.0], [54.3, 15873.0], [54.4, 15875.0], [54.5, 15880.0], [54.6, 15888.0], [54.7, 15896.0], [54.8, 15909.0], [54.9, 15914.0], [55.0, 15916.0], [55.1, 15916.0], [55.2, 15921.0], [55.3, 15922.0], [55.4, 15927.0], [55.5, 15928.0], [55.6, 15931.0], [55.7, 15938.0], [55.8, 15948.0], [55.9, 15950.0], [56.0, 15950.0], [56.1, 15951.0], [56.2, 15952.0], [56.3, 15966.0], [56.4, 15975.0], [56.5, 16000.0], [56.6, 16006.0], [56.7, 16008.0], [56.8, 16018.0], [56.9, 16018.0], [57.0, 16025.0], [57.1, 16025.0], [57.2, 16026.0], [57.3, 16029.0], [57.4, 16031.0], [57.5, 16031.0], [57.6, 16041.0], [57.7, 16045.0], [57.8, 16047.0], [57.9, 16053.0], [58.0, 16053.0], [58.1, 16055.0], [58.2, 16065.0], [58.3, 16069.0], [58.4, 16075.0], [58.5, 16084.0], [58.6, 16085.0], [58.7, 16098.0], [58.8, 16102.0], [58.9, 16103.0], [59.0, 16105.0], [59.1, 16108.0], [59.2, 16110.0], [59.3, 16110.0], [59.4, 16118.0], [59.5, 16119.0], [59.6, 16121.0], [59.7, 16153.0], [59.8, 16157.0], [59.9, 16166.0], [60.0, 16166.0], [60.1, 16178.0], [60.2, 16179.0], [60.3, 16180.0], [60.4, 16193.0], [60.5, 16197.0], [60.6, 16198.0], [60.7, 16214.0], [60.8, 16216.0], [60.9, 16217.0], [61.0, 16217.0], [61.1, 16222.0], [61.2, 16223.0], [61.3, 16231.0], [61.4, 16231.0], [61.5, 16233.0], [61.6, 16238.0], [61.7, 16240.0], [61.8, 16247.0], [61.9, 16254.0], [62.0, 16254.0], [62.1, 16254.0], [62.2, 16261.0], [62.3, 16265.0], [62.4, 16269.0], [62.5, 16279.0], [62.6, 16284.0], [62.7, 16286.0], [62.8, 16295.0], [62.9, 16299.0], [63.0, 16305.0], [63.1, 16307.0], [63.2, 16315.0], [63.3, 16322.0], [63.4, 16329.0], [63.5, 16333.0], [63.6, 16342.0], [63.7, 16344.0], [63.8, 16352.0], [63.9, 16372.0], [64.0, 16372.0], [64.1, 16381.0], [64.2, 16383.0], [64.3, 16387.0], [64.4, 16399.0], [64.5, 16399.0], [64.6, 16410.0], [64.7, 16412.0], [64.8, 16415.0], [64.9, 16416.0], [65.0, 16446.0], [65.1, 16449.0], [65.2, 16465.0], [65.3, 16469.0], [65.4, 16469.0], [65.5, 16474.0], [65.6, 16480.0], [65.7, 16483.0], [65.8, 16489.0], [65.9, 16492.0], [66.0, 16492.0], [66.1, 16493.0], [66.2, 16493.0], [66.3, 16503.0], [66.4, 16511.0], [66.5, 16519.0], [66.6, 16529.0], [66.7, 16532.0], [66.8, 16533.0], [66.9, 16535.0], [67.0, 16536.0], [67.1, 16537.0], [67.2, 16542.0], [67.3, 16554.0], [67.4, 16563.0], [67.5, 16563.0], [67.6, 16568.0], [67.7, 16570.0], [67.8, 16571.0], [67.9, 16575.0], [68.0, 16575.0], [68.1, 16579.0], [68.2, 16591.0], [68.3, 16599.0], [68.4, 16606.0], [68.5, 16615.0], [68.6, 16620.0], [68.7, 16627.0], [68.8, 16629.0], [68.9, 16637.0], [69.0, 16638.0], [69.1, 16642.0], [69.2, 16647.0], [69.3, 16647.0], [69.4, 16651.0], [69.5, 16657.0], [69.6, 16658.0], [69.7, 16659.0], [69.8, 16678.0], [69.9, 16680.0], [70.0, 16680.0], [70.1, 16682.0], [70.2, 16691.0], [70.3, 16691.0], [70.4, 16692.0], [70.5, 16693.0], [70.6, 16699.0], [70.7, 16716.0], [70.8, 16716.0], [70.9, 16719.0], [71.0, 16721.0], [71.1, 16730.0], [71.2, 16745.0], [71.3, 16749.0], [71.4, 16764.0], [71.5, 16767.0], [71.6, 16769.0], [71.7, 16773.0], [71.8, 16783.0], [71.9, 16785.0], [72.0, 16785.0], [72.1, 16791.0], [72.2, 16797.0], [72.3, 16801.0], [72.4, 16814.0], [72.5, 16817.0], [72.6, 16820.0], [72.7, 16826.0], [72.8, 16828.0], [72.9, 16840.0], [73.0, 16854.0], [73.1, 16859.0], [73.2, 16865.0], [73.3, 16868.0], [73.4, 16875.0], [73.5, 16882.0], [73.6, 16883.0], [73.7, 16890.0], [73.8, 16893.0], [73.9, 16897.0], [74.0, 16897.0], [74.1, 16905.0], [74.2, 16919.0], [74.3, 16921.0], [74.4, 16924.0], [74.5, 16928.0], [74.6, 16940.0], [74.7, 16942.0], [74.8, 16943.0], [74.9, 16948.0], [75.0, 16948.0], [75.1, 16957.0], [75.2, 16963.0], [75.3, 16965.0], [75.4, 16966.0], [75.5, 16967.0], [75.6, 16970.0], [75.7, 16971.0], [75.8, 16977.0], [75.9, 16978.0], [76.0, 16978.0], [76.1, 16979.0], [76.2, 16982.0], [76.3, 16989.0], [76.4, 16992.0], [76.5, 16997.0], [76.6, 17000.0], [76.7, 17000.0], [76.8, 17008.0], [76.9, 17021.0], [77.0, 17022.0], [77.1, 17023.0], [77.2, 17025.0], [77.3, 17027.0], [77.4, 17040.0], [77.5, 17058.0], [77.6, 17063.0], [77.7, 17070.0], [77.8, 17075.0], [77.9, 17078.0], [78.0, 17078.0], [78.1, 17083.0], [78.2, 17097.0], [78.3, 17099.0], [78.4, 17102.0], [78.5, 17114.0], [78.6, 17142.0], [78.7, 17149.0], [78.8, 17152.0], [78.9, 17164.0], [79.0, 17166.0], [79.1, 17171.0], [79.2, 17174.0], [79.3, 17177.0], [79.4, 17177.0], [79.5, 17177.0], [79.6, 17188.0], [79.7, 17191.0], [79.8, 17199.0], [79.9, 17202.0], [80.0, 17202.0], [80.1, 17207.0], [80.2, 17211.0], [80.3, 17219.0], [80.4, 17226.0], [80.5, 17231.0], [80.6, 17233.0], [80.7, 17237.0], [80.8, 17240.0], [80.9, 17242.0], [81.0, 17248.0], [81.1, 17255.0], [81.2, 17255.0], [81.3, 17257.0], [81.4, 17264.0], [81.5, 17267.0], [81.6, 17272.0], [81.7, 17281.0], [81.8, 17286.0], [81.9, 17306.0], [82.0, 17306.0], [82.1, 17309.0], [82.2, 17314.0], [82.3, 17322.0], [82.4, 17325.0], [82.5, 17336.0], [82.6, 17348.0], [82.7, 17352.0], [82.8, 17354.0], [82.9, 17354.0], [83.0, 17371.0], [83.1, 17375.0], [83.2, 17378.0], [83.3, 17384.0], [83.4, 17404.0], [83.5, 17415.0], [83.6, 17419.0], [83.7, 17421.0], [83.8, 17426.0], [83.9, 17436.0], [84.0, 17436.0], [84.1, 17441.0], [84.2, 17457.0], [84.3, 17465.0], [84.4, 17468.0], [84.5, 17468.0], [84.6, 17494.0], [84.7, 17509.0], [84.8, 17527.0], [84.9, 17543.0], [85.0, 17546.0], [85.1, 17547.0], [85.2, 17558.0], [85.3, 17559.0], [85.4, 17572.0], [85.5, 17577.0], [85.6, 17577.0], [85.7, 17596.0], [85.8, 17637.0], [85.9, 17661.0], [86.0, 17661.0], [86.1, 17667.0], [86.2, 17724.0], [86.3, 17728.0], [86.4, 17749.0], [86.5, 17772.0], [86.6, 17787.0], [86.7, 17789.0], [86.8, 17824.0], [86.9, 17826.0], [87.0, 17856.0], [87.1, 17867.0], [87.2, 17875.0], [87.3, 17877.0], [87.4, 17892.0], [87.5, 17899.0], [87.6, 17899.0], [87.7, 17905.0], [87.8, 17917.0], [87.9, 17921.0], [88.0, 17921.0], [88.1, 17944.0], [88.2, 17954.0], [88.3, 17971.0], [88.4, 17973.0], [88.5, 17974.0], [88.6, 17998.0], [88.7, 18036.0], [88.8, 18079.0], [88.9, 18104.0], [89.0, 18150.0], [89.1, 18164.0], [89.2, 18164.0], [89.3, 18171.0], [89.4, 18179.0], [89.5, 18180.0], [89.6, 18193.0], [89.7, 18196.0], [89.8, 18217.0], [89.9, 18223.0], [90.0, 18223.0], [90.1, 18227.0], [90.2, 18229.0], [90.3, 18240.0], [90.4, 18248.0], [90.5, 18251.0], [90.6, 18259.0], [90.7, 18263.0], [90.8, 18275.0], [90.9, 18279.0], [91.0, 18281.0], [91.1, 18313.0], [91.2, 18321.0], [91.3, 18324.0], [91.4, 18326.0], [91.5, 18339.0], [91.6, 18344.0], [91.7, 18353.0], [91.8, 18374.0], [91.9, 18382.0], [92.0, 18382.0], [92.1, 18395.0], [92.2, 18432.0], [92.3, 18436.0], [92.4, 18448.0], [92.5, 18449.0], [92.6, 18460.0], [92.7, 18463.0], [92.8, 18485.0], [92.9, 18490.0], [93.0, 18502.0], [93.1, 18510.0], [93.2, 18514.0], [93.3, 18526.0], [93.4, 18547.0], [93.5, 18557.0], [93.6, 18584.0], [93.7, 18643.0], [93.8, 18651.0], [93.9, 18658.0], [94.0, 18658.0], [94.1, 18662.0], [94.2, 18669.0], [94.3, 18679.0], [94.4, 18685.0], [94.5, 18704.0], [94.6, 18706.0], [94.7, 18713.0], [94.8, 18734.0], [94.9, 18746.0], [95.0, 18762.0], [95.1, 18789.0], [95.2, 18798.0], [95.3, 18840.0], [95.4, 18848.0], [95.5, 18866.0], [95.6, 18895.0], [95.7, 18895.0], [95.8, 18896.0], [95.9, 18911.0], [96.0, 18911.0], [96.1, 18923.0], [96.2, 18925.0], [96.3, 18931.0], [96.4, 18937.0], [96.5, 18956.0], [96.6, 18963.0], [96.7, 18968.0], [96.8, 19007.0], [96.9, 19101.0], [97.0, 19119.0], [97.1, 19122.0], [97.2, 19176.0], [97.3, 19179.0], [97.4, 19191.0], [97.5, 19205.0], [97.6, 19214.0], [97.7, 19226.0], [97.8, 19285.0], [97.9, 19322.0], [98.0, 19322.0], [98.1, 19356.0], [98.2, 19395.0], [98.3, 19416.0], [98.4, 19453.0], [98.5, 19478.0], [98.6, 19480.0], [98.7, 19544.0], [98.8, 19546.0], [98.9, 19547.0], [99.0, 19563.0], [99.1, 19792.0], [99.2, 19986.0], [99.3, 20133.0], [99.4, 20142.0], [99.5, 20162.0], [99.6, 20204.0], [99.7, 20207.0], [99.8, 20229.0], [99.9, 20398.0], [100.0, 20398.0]], "isOverall": false, "label": "api_testing", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1000.0, "maxY": 26.0, "series": [{"data": [[1000.0, 2.0], [1100.0, 3.0], [1200.0, 12.0], [1300.0, 23.0], [1400.0, 14.0], [1500.0, 14.0], [1600.0, 11.0], [1700.0, 18.0], [1800.0, 8.0], [1900.0, 5.0], [2000.0, 5.0], [2100.0, 7.0], [2200.0, 5.0], [2300.0, 2.0], [2400.0, 3.0], [2500.0, 7.0], [2600.0, 5.0], [2800.0, 6.0], [2700.0, 4.0], [2900.0, 7.0], [3000.0, 2.0], [3100.0, 2.0], [3200.0, 2.0], [3300.0, 6.0], [3400.0, 5.0], [3500.0, 7.0], [3600.0, 7.0], [3700.0, 2.0], [3800.0, 5.0], [3900.0, 1.0], [4000.0, 1.0], [4300.0, 5.0], [4200.0, 2.0], [4500.0, 10.0], [4400.0, 6.0], [4600.0, 4.0], [4700.0, 5.0], [4800.0, 9.0], [5000.0, 6.0], [4900.0, 8.0], [5100.0, 4.0], [5200.0, 2.0], [5300.0, 6.0], [5500.0, 9.0], [5400.0, 7.0], [5600.0, 4.0], [5800.0, 2.0], [6100.0, 5.0], [5900.0, 8.0], [6000.0, 3.0], [6300.0, 2.0], [6200.0, 3.0], [6500.0, 1.0], [6400.0, 2.0], [6600.0, 1.0], [6700.0, 4.0], [6800.0, 2.0], [6900.0, 3.0], [7100.0, 1.0], [7000.0, 2.0], [7200.0, 1.0], [7300.0, 4.0], [7900.0, 4.0], [7700.0, 4.0], [7800.0, 2.0], [8000.0, 2.0], [8700.0, 3.0], [8800.0, 3.0], [8900.0, 3.0], [9100.0, 1.0], [10900.0, 1.0], [11000.0, 2.0], [12100.0, 2.0], [12200.0, 2.0], [12300.0, 5.0], [12400.0, 6.0], [15300.0, 25.0], [15200.0, 26.0], [15100.0, 13.0], [15700.0, 20.0], [15800.0, 25.0], [15400.0, 14.0], [15600.0, 15.0], [15500.0, 10.0], [16200.0, 22.0], [15900.0, 16.0], [16300.0, 15.0], [16100.0, 18.0], [16000.0, 22.0], [17200.0, 19.0], [16400.0, 16.0], [16900.0, 24.0], [17100.0, 15.0], [17000.0, 17.0], [16800.0, 17.0], [16500.0, 20.0], [16600.0, 22.0], [17300.0, 14.0], [17400.0, 12.0], [16700.0, 15.0], [17900.0, 9.0], [17800.0, 9.0], [18300.0, 10.0], [18200.0, 12.0], [18100.0, 9.0], [18400.0, 8.0], [18000.0, 2.0], [17600.0, 3.0], [17500.0, 11.0], [17700.0, 6.0], [18600.0, 7.0], [18700.0, 8.0], [19100.0, 6.0], [19000.0, 1.0], [18900.0, 8.0], [18800.0, 6.0], [19400.0, 4.0], [18500.0, 7.0], [19300.0, 3.0], [19200.0, 4.0], [19500.0, 4.0], [20200.0, 3.0], [20300.0, 1.0], [19700.0, 1.0], [20100.0, 3.0], [19900.0, 1.0]], "isOverall": false, "label": "api_testing", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 55.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 573.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 55.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 322.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 573.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 18.199999999999996, "minX": 1.62713358E12, "maxY": 495.48196721311444, "series": [{"data": [[1.62713358E12, 495.48196721311444], [1.62713364E12, 18.199999999999996]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62713364E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1192.0, "minX": 1.0, "maxY": 20207.0, "series": [{"data": [[2.0, 12442.0], [4.0, 12459.0], [5.0, 12438.0], [6.0, 12394.0], [8.0, 12397.5], [9.0, 12396.0], [10.0, 12341.0], [11.0, 12378.0], [12.0, 12298.0], [13.0, 12285.0], [14.0, 12167.0], [15.0, 12144.0], [16.0, 11006.0], [17.0, 11010.0], [18.0, 10954.0], [19.0, 7361.0], [20.0, 7340.0], [21.0, 7333.0], [22.0, 6791.0], [23.0, 7315.0], [24.0, 7278.0], [25.0, 7060.0], [26.0, 9177.0], [27.0, 8984.0], [29.0, 8763.5], [30.0, 8909.0], [31.0, 8728.0], [33.0, 8937.0], [35.0, 8871.333333333334], [36.0, 6162.0], [39.0, 6072.0], [38.0, 6026.0], [41.0, 5926.5], [43.0, 6040.0], [42.0, 5925.0], [45.0, 8025.5], [46.0, 6011.0], [48.0, 6974.5], [51.0, 7802.0], [50.0, 6966.5], [53.0, 7950.0], [55.0, 7734.0], [54.0, 7938.0], [57.0, 7759.0], [56.0, 7725.0], [59.0, 6956.0], [58.0, 7016.0], [61.0, 6885.0], [60.0, 7935.0], [63.0, 6628.0], [62.0, 6768.0], [67.0, 5526.0], [66.0, 5446.0], [64.0, 5330.0], [71.0, 6915.0], [70.0, 7122.0], [69.0, 5015.0], [68.0, 5102.0], [75.0, 6454.0], [74.0, 6494.0], [73.0, 6288.0], [72.0, 6217.0], [79.0, 6779.0], [78.0, 6821.0], [77.0, 6990.0], [76.0, 6234.0], [83.0, 4902.0], [81.0, 6766.0], [80.0, 5158.0], [87.0, 4789.0], [86.0, 4578.0], [85.0, 4953.0], [91.0, 4457.0], [90.0, 4658.0], [89.0, 4559.0], [88.0, 4766.0], [95.0, 4288.0], [94.0, 5043.666666666667], [99.0, 5887.0], [98.0, 5915.0], [97.0, 4345.0], [103.0, 5933.0], [102.0, 5960.0], [101.0, 6349.0], [100.0, 6359.0], [107.0, 5554.0], [106.0, 5666.0], [105.0, 5642.0], [104.0, 5678.0], [111.0, 5543.0], [110.0, 5515.0], [109.0, 6564.0], [108.0, 5599.0], [115.0, 5425.0], [114.0, 5200.0], [113.0, 5434.0], [112.0, 5490.0], [119.0, 5134.0], [118.0, 5378.5], [117.0, 5133.0], [123.0, 5028.0], [122.0, 5082.0], [121.0, 5684.0], [120.0, 5316.0], [127.0, 4978.0], [126.0, 4898.0], [125.0, 5523.0], [124.0, 5019.0], [135.0, 5175.0], [134.0, 4945.0], [132.0, 4872.0], [131.0, 4927.0], [130.0, 4927.0], [129.0, 4952.0], [128.0, 5578.0], [143.0, 5376.0], [142.0, 4827.5], [140.0, 6192.0], [139.0, 5428.5], [137.0, 5827.0], [136.0, 4901.0], [151.0, 5206.0], [150.0, 5580.0], [149.0, 4523.5], [147.0, 4536.0], [146.0, 4662.0], [145.0, 4597.0], [144.0, 5369.0], [159.0, 4815.0], [158.0, 4894.0], [157.0, 4341.0], [156.0, 5066.0], [155.0, 4345.0], [154.0, 4457.0], [153.0, 17572.0], [152.0, 4478.0], [167.0, 3714.0], [166.0, 3767.0], [165.0, 3827.0], [164.0, 3852.0], [163.0, 3843.0], [162.0, 4062.0], [161.0, 3863.0], [160.0, 3922.0], [175.0, 3657.0], [174.0, 3622.0], [173.0, 2378.0], [172.0, 3661.0], [171.0, 3636.0], [170.0, 2465.0], [169.0, 3670.0], [168.0, 3684.0], [183.0, 3474.0], [182.0, 2311.0], [181.0, 3535.0], [180.0, 3472.0], [179.0, 3496.0], [178.0, 3507.0], [177.0, 3584.0], [176.0, 3591.0], [190.0, 2934.0], [188.0, 2937.0], [187.0, 2925.0], [186.0, 2943.0], [185.0, 3436.0], [184.0, 3131.0], [199.0, 3396.0], [198.0, 2777.0], [197.0, 3076.0], [196.0, 3086.0], [194.0, 2932.0], [193.0, 2920.0], [192.0, 3258.0], [207.0, 3309.0], [206.0, 3307.0], [205.0, 3319.0], [204.0, 2146.0], [203.0, 2522.0], [202.0, 2530.0], [201.0, 2537.0], [200.0, 3383.0], [215.0, 4769.0], [214.0, 4782.0], [213.0, 4810.0], [212.0, 2176.0], [211.0, 3133.0], [210.0, 4567.0], [209.0, 3218.0], [208.0, 3232.0], [220.0, 3286.0], [218.0, 2083.0], [217.0, 4596.5], [231.0, 17233.0], [229.0, 17235.5], [228.0, 17257.0], [226.0, 15800.0], [225.0, 9572.0], [224.0, 2014.0], [237.0, 17787.0], [236.0, 15304.0], [235.0, 9523.0], [233.0, 16449.0], [232.0, 16850.0], [247.0, 19205.0], [245.0, 2061.0], [244.0, 17242.0], [243.0, 17311.5], [242.0, 16850.5], [241.0, 18406.0], [254.0, 18036.0], [253.0, 17058.0], [251.0, 17749.0], [250.0, 20162.0], [249.0, 18914.666666666668], [270.0, 17527.5], [271.0, 17648.5], [269.0, 17177.0], [259.0, 17070.0], [267.0, 18291.5], [264.0, 20207.0], [262.0, 15797.0], [263.0, 15497.0], [261.0, 17228.666666666668], [260.0, 17114.0], [275.0, 16666.0], [287.0, 16219.0], [285.0, 15184.0], [283.0, 17899.0], [282.0, 19416.0], [281.0, 18124.666666666668], [279.0, 17211.0], [278.0, 16167.5], [273.0, 19775.5], [272.0, 17023.0], [302.0, 17152.0], [303.0, 16231.0], [301.0, 15203.0], [300.0, 15215.0], [299.0, 15211.0], [298.0, 15212.0], [297.0, 15203.0], [296.0, 15195.0], [295.0, 17171.0], [289.0, 17188.0], [288.0, 16465.0], [291.0, 3297.5], [290.0, 4576.0], [294.0, 2057.0], [293.0, 4464.0], [318.0, 18217.0], [319.0, 15333.0], [317.0, 15276.0], [316.0, 17306.0], [315.0, 17971.0], [314.0, 18830.0], [312.0, 17803.5], [311.0, 15259.0], [305.0, 3080.5], [307.0, 16820.0], [306.0, 1830.0], [309.0, 16410.0], [308.0, 16814.0], [335.0, 18344.0], [330.0, 17787.666666666668], [329.0, 18079.0], [327.0, 9828.0], [326.0, 17078.5], [323.0, 18963.0], [321.0, 17826.0], [320.0, 15657.0], [339.0, 16826.0], [350.0, 18956.0], [349.0, 17436.0], [337.0, 18988.5], [336.0, 17856.5], [347.0, 15345.0], [346.0, 18459.0], [345.0, 15339.0], [343.0, 19478.0], [342.0, 17421.0], [341.0, 18589.0], [340.0, 18374.0], [365.0, 15821.0], [366.0, 15824.0], [364.0, 15807.0], [363.0, 15806.0], [362.0, 15813.0], [361.0, 2652.0], [360.0, 7085.333333333334], [358.0, 1838.0], [352.0, 15880.333333333334], [355.0, 2693.0], [370.0, 15826.0], [382.0, 16055.0], [383.0, 15792.0], [380.0, 15870.5], [378.0, 15745.0], [376.0, 15722.0], [375.0, 2839.0], [373.0, 15832.0], [372.0, 15723.0], [369.0, 15825.0], [368.0, 15705.5], [398.0, 16254.0], [397.0, 4974.2], [394.0, 16073.0], [392.0, 9453.0], [391.0, 2796.0], [390.0, 2818.0], [388.0, 1963.0], [387.0, 1767.0], [385.0, 15345.0], [403.0, 16339.0], [414.0, 16085.0], [415.0, 15731.0], [413.0, 2714.5], [411.0, 11282.333333333334], [408.0, 15821.0], [407.0, 16503.0], [405.0, 15773.0], [404.0, 16219.5], [401.0, 15653.0], [400.0, 16271.0], [430.0, 3581.0], [431.0, 15685.0], [429.0, 15664.0], [428.0, 16153.0], [427.0, 15798.0], [426.0, 16352.0], [425.0, 15441.0], [424.0, 16065.0], [423.0, 16259.0], [417.0, 15404.0], [416.0, 15525.0], [419.0, 15314.0], [418.0, 16599.0], [422.0, 15223.0], [420.0, 16008.0], [434.0, 16047.0], [446.0, 15979.333333333334], [444.0, 15248.0], [442.0, 15286.0], [441.0, 16183.5], [439.0, 16019.75], [437.0, 16519.0], [433.0, 16579.0], [432.0, 16178.0], [462.0, 16924.0], [463.0, 15284.0], [461.0, 15246.0], [460.0, 17097.0], [459.0, 17022.0], [458.0, 15617.5], [456.0, 15497.0], [455.0, 15330.0], [448.0, 17000.0], [451.0, 15972.5], [449.0, 16413.5], [454.0, 17058.0], [453.0, 15391.0], [452.0, 15312.0], [477.0, 17207.0], [478.0, 16342.0], [476.0, 16542.0], [475.0, 16197.0], [474.0, 1706.0], [473.0, 16139.5], [470.0, 16219.0], [469.0, 17177.0], [467.0, 17174.0], [466.0, 16489.0], [465.0, 16483.0], [464.0, 15722.0], [492.0, 17063.0], [494.0, 17494.0], [495.0, 16454.5], [493.0, 17509.0], [490.0, 15979.0], [488.0, 15655.5], [486.0, 17073.0], [485.0, 15983.5], [482.0, 16892.333333333332], [481.0, 16539.0], [510.0, 17559.0], [508.0, 16634.5], [506.0, 17354.0], [505.0, 16261.0], [504.0, 16238.0], [503.0, 17974.0], [502.0, 15190.0], [500.0, 16749.0], [497.0, 16652.5], [543.0, 8932.25], [538.0, 12913.666666666666], [518.0, 18074.5], [516.0, 16933.25], [515.0, 17044.0], [514.0, 16978.0], [512.0, 17217.333333333332], [535.0, 16966.5], [534.0, 16612.0], [532.0, 18658.0], [530.0, 17671.0], [528.0, 18382.0], [527.0, 18261.5], [525.0, 17348.0], [524.0, 17769.0], [522.0, 18251.0], [521.0, 3263.3333333333335], [563.0, 16387.0], [573.0, 15679.0], [572.0, 15395.0], [569.0, 17415.0], [568.0, 18073.5], [558.0, 16563.5], [544.0, 17544.5], [547.0, 17842.0], [545.0, 16948.0], [550.0, 16815.0], [549.0, 16018.0], [556.0, 16943.0], [554.0, 16965.0], [553.0, 17322.0], [552.0, 1655.0], [567.0, 16928.0], [566.0, 9057.5], [565.0, 16138.5], [561.0, 15182.0], [560.0, 17616.333333333332], [602.0, 16315.0], [594.0, 1732.5], [606.0, 1740.0], [607.0, 1538.0], [593.0, 1732.0], [592.0, 1727.0], [605.0, 18463.0], [600.0, 17356.0], [583.0, 18706.0], [582.0, 1680.5], [580.0, 15238.0], [579.0, 15372.0], [578.0, 17899.0], [577.0, 15672.25], [590.0, 18449.0], [589.0, 18324.0], [588.0, 17248.0], [587.0, 1694.6666666666667], [584.0, 16905.0], [598.0, 18710.5], [596.0, 19007.0], [595.0, 18584.0], [628.0, 17517.5], [636.0, 17078.0], [638.0, 1474.0], [626.0, 17469.5], [624.0, 18669.0], [635.0, 18275.0], [634.0, 17384.0], [633.0, 17183.5], [613.0, 16883.0], [612.0, 18762.0], [609.0, 17720.0], [608.0, 16108.0], [622.0, 18923.0], [621.0, 1534.5], [620.0, 5510.8], [618.0, 2556.0], [617.0, 1736.0], [631.0, 17267.0], [630.0, 18968.0], [629.0, 17313.666666666668], [670.0, 16470.0], [660.0, 18685.0], [671.0, 18263.0], [656.0, 2502.0], [658.0, 16773.0], [657.0, 16537.0], [669.0, 16028.0], [668.0, 16804.0], [664.0, 16026.0], [644.0, 17596.0], [643.0, 16006.0], [642.0, 17202.0], [641.0, 18279.0], [640.0, 1656.6666666666667], [655.0, 1639.0], [654.0, 16053.0], [653.0, 15720.0], [652.0, 15407.0], [651.0, 16084.0], [650.0, 16769.0], [649.0, 16859.0], [648.0, 5385.75], [663.0, 16797.0], [662.0, 15966.5], [661.0, 16029.0], [699.0, 18223.0], [703.0, 15629.0], [698.0, 15483.0], [696.0, 16415.0], [695.0, 15711.0], [694.0, 1624.0], [691.0, 15418.0], [689.0, 18510.0], [686.0, 15230.0], [673.0, 16025.0], [672.0, 15350.0], [678.0, 15380.0], [676.0, 18485.0], [684.0, 15215.0], [682.0, 15197.0], [680.0, 16868.0], [733.0, 1351.0], [734.0, 1402.0], [732.0, 1410.0], [730.0, 15875.0], [729.0, 5403.0], [728.0, 16069.0], [718.0, 16783.0], [704.0, 2458.0], [707.0, 16721.0], [705.0, 15524.0], [711.0, 17441.0], [710.0, 16953.0], [716.0, 1374.0], [715.0, 2831.0], [713.0, 18557.0], [726.0, 17070.0], [723.0, 16764.0], [722.0, 18240.0], [762.0, 17917.0], [756.0, 16113.0], [763.0, 16629.0], [752.0, 17025.0], [761.0, 16680.0], [760.0, 16657.0], [750.0, 15723.0], [737.0, 1566.1818181818182], [741.0, 7689.4000000000015], [739.0, 18353.0], [743.0, 15735.0], [742.0, 18171.0], [749.0, 16647.0], [748.0, 15916.0], [747.0, 15909.0], [746.0, 16121.0], [745.0, 16699.0], [744.0, 16675.5], [759.0, 15185.0], [758.0, 15255.0], [757.0, 15226.0], [754.0, 18248.0], [753.0, 9434.0], [796.0, 2180.0], [788.0, 16166.0], [799.0, 1400.3333333333333], [784.0, 15923.5], [787.0, 18679.0], [786.0, 17572.5], [795.0, 1392.0], [793.0, 16286.0], [792.0, 16638.0], [775.0, 15616.0], [772.0, 15498.0], [771.0, 15873.0], [770.0, 4020.3333333333335], [783.0, 1305.0], [782.0, 18848.0], [781.0, 15317.0], [780.0, 17637.0], [779.0, 15263.0], [777.0, 17806.0], [776.0, 17264.0], [791.0, 16615.0], [790.0, 16620.0], [789.0, 15950.0], [829.0, 16575.0], [831.0, 8853.5], [817.0, 4312.799999999999], [819.0, 15805.0], [818.0, 15938.0], [828.0, 16536.0], [827.0, 17892.0], [826.0, 17250.5], [824.0, 1192.0], [808.0, 1690.5], [801.0, 18937.0], [800.0, 1262.0], [803.0, 15830.0], [802.0, 17577.0], [807.0, 1259.0], [804.0, 16240.0], [823.0, 1232.0], [822.0, 2123.0], [821.0, 16591.0], [820.0, 17075.0], [858.0, 1350.0], [862.0, 16416.0], [863.0, 15622.0], [850.0, 16187.5], [848.0, 19214.0], [853.0, 17252.5], [851.0, 16570.0], [861.0, 1302.0], [860.0, 1331.0], [859.0, 17647.0], [857.0, 15888.0], [839.0, 15758.0], [838.0, 8860.5], [837.0, 15615.0], [835.0, 16919.0], [834.0, 16897.0], [833.0, 16532.0], [832.0, 2263.0], [847.0, 16399.0], [846.0, 17867.0], [845.0, 15966.0], [844.0, 17147.5], [842.0, 16700.5], [840.0, 16882.0], [855.0, 1387.0], [854.0, 1353.0], [889.0, 10198.0], [893.0, 16322.0], [894.0, 16637.0], [892.0, 16279.0], [891.0, 16333.0], [890.0, 16284.0], [879.0, 15428.0], [864.0, 16045.0], [867.0, 1277.0], [866.0, 16381.0], [870.0, 16331.0], [868.0, 8328.0], [878.0, 15519.0], [876.0, 15617.5], [874.0, 15615.0], [873.0, 15597.0], [872.0, 16215.0], [887.0, 18570.5], [885.0, 17665.0], [883.0, 17595.5], [881.0, 18847.5], [923.0, 16307.0], [914.0, 17101.5], [925.0, 15397.0], [927.0, 8722.0], [912.0, 19101.0], [924.0, 1744.0], [920.0, 15473.0], [903.0, 18395.0], [902.0, 19028.5], [901.0, 17905.0], [899.0, 12085.666666666666], [898.0, 16493.0], [897.0, 16157.0], [911.0, 18229.0], [910.0, 18895.0], [909.0, 16785.0], [908.0, 17000.0], [907.0, 18977.5], [905.0, 17502.0], [919.0, 16233.0], [917.0, 16224.0], [915.0, 16214.0], [947.0, 17824.0], [950.0, 17118.0], [949.0, 19546.0], [948.0, 18651.0], [944.0, 15916.0], [933.0, 16875.0], [932.0, 19176.0], [931.0, 17944.0], [930.0, 17177.0], [929.0, 18931.0], [928.0, 1664.0], [943.0, 15922.0], [942.0, 15921.0], [941.0, 15952.0], [940.0, 15948.0], [939.0, 16307.0], [938.0, 16940.0], [937.0, 18789.0], [936.0, 17499.333333333332], [1.0, 12499.0]], "isOverall": false, "label": "api_testing", "isController": false}, {"data": [[477.89789473684175, 11885.127368421056]], "isOverall": false, "label": "api_testing-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 950.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 111.41666666666667, "minX": 1.62713358E12, "maxY": 37789.71666666667, "series": [{"data": [[1.62713358E12, 37789.71666666667], [1.62713364E12, 1058.2333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62713358E12, 1088.7], [1.62713364E12, 111.41666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62713364E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 10223.400000000003, "minX": 1.62713358E12, "maxY": 11948.690710382518, "series": [{"data": [[1.62713358E12, 11948.690710382518], [1.62713364E12, 10223.400000000003]], "isOverall": false, "label": "api_testing", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62713364E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1396.5519125683063, "minX": 1.62713358E12, "maxY": 10216.82857142857, "series": [{"data": [[1.62713358E12, 1396.5519125683063], [1.62713364E12, 10216.82857142857]], "isOverall": false, "label": "api_testing", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62713364E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 352.3428571428572, "minX": 1.62713358E12, "maxY": 10147.055737704912, "series": [{"data": [[1.62713358E12, 10147.055737704912], [1.62713364E12, 352.3428571428572]], "isOverall": false, "label": "api_testing", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62713364E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1001.0, "minX": 1.62713358E12, "maxY": 17572.0, "series": [{"data": [[1.62713358E12, 17572.0], [1.62713364E12, 12499.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62713358E12, 6271.799999999999], [1.62713364E12, 12448.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62713358E12, 15761.71], [1.62713364E12, 12499.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62713358E12, 7634.549999999979], [1.62713364E12, 12467.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62713358E12, 1001.0], [1.62713364E12, 6791.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62713358E12, 3388.5], [1.62713364E12, 10954.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62713364E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1569.0, "minX": 3.0, "maxY": 17705.0, "series": [{"data": [[17.0, 8758.0], [295.0, 1569.0], [81.0, 1681.0], [40.0, 5442.0], [3.0, 11006.0], [107.0, 3309.0], [55.0, 5206.0], [27.0, 6956.0], [15.0, 12394.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[295.0, 16693.0], [76.0, 16080.0], [80.0, 17705.0], [81.0, 16890.0], [49.0, 16372.0], [24.0, 15822.0], [107.0, 17174.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 295.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 12390.0, "series": [{"data": [[17.0, 8758.0], [295.0, 1561.5], [81.0, 1681.0], [40.0, 5438.0], [3.0, 11000.0], [107.0, 3307.0], [55.0, 5200.0], [27.0, 6956.0], [15.0, 12390.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[295.0, 0.0], [76.0, 0.0], [80.0, 0.0], [81.0, 0.0], [49.0, 0.0], [24.0, 0.0], [107.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 295.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 15.833333333333334, "minX": 1.62713358E12, "maxY": 15.833333333333334, "series": [{"data": [[1.62713358E12, 15.833333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62713358E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.62713358E12, "maxY": 5.7, "series": [{"data": [[1.62713358E12, 1.0166666666666666]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.62713358E12, 5.35]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.62713358E12, 5.7], [1.62713364E12, 0.5833333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62713358E12, 3.183333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62713364E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.62713358E12, "maxY": 9.55, "series": [{"data": [[1.62713358E12, 9.55]], "isOverall": false, "label": "api_testing-failure", "isController": false}, {"data": [[1.62713358E12, 5.7], [1.62713364E12, 0.5833333333333334]], "isOverall": false, "label": "api_testing-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62713364E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.62713358E12, "maxY": 9.55, "series": [{"data": [[1.62713358E12, 5.7], [1.62713364E12, 0.5833333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62713358E12, 9.55]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62713364E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

